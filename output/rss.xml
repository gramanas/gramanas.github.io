<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gramanas &gt;&gt; blog</title><link>https://gramanas.github.io/</link><description>LLVM development log for GSoC 2018</description><atom:link href="https://gramanas.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:anastasis.gramm2@gmail.com"&gt;Anastasis Grammenos&lt;/a&gt; </copyright><lastBuildDate>Tue, 27 Mar 2018 14:37:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Finding DebugInfo Loss</title><link>https://gramanas.github.io/posts/finding-debuginfo-loss/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
In order to fix &lt;code&gt;DebugInfo&lt;/code&gt; loss I need to find where and when it occurs.
Many transformations result in &lt;code&gt;DI&lt;/code&gt; loss due to the simple fact that they change
and optimize code and thus the resulting llvm IR doesn't match the
original code.
&lt;/p&gt;

&lt;p&gt;
The opt tool has the &lt;code&gt;-debugify&lt;/code&gt; and &lt;code&gt;-check-debugify&lt;/code&gt; flags to attach
&lt;code&gt;DI&lt;/code&gt; to everything and then check if it's correct.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Find culprit transformations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
With a simple bash script I can run tests under a transformation folder
like so:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;ls ~/code/llvm/test/Transforms/&lt;span class="nv"&gt;$TRANSFORMATION&lt;/span&gt;/*.ll -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;":\n-------"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    opt -debugify -&lt;span class="nv"&gt;$TRANSFORMATION&lt;/span&gt; -check-debugify -disable-output &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"-------\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt; results &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then proceed to view the results.
&lt;/p&gt;

&lt;p&gt;
For example here is the command for the LICM transformation:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;ls ~/code/llvm/test/Transforms/LICM/*.ll -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;":\n-------"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    opt -debugify -licm -check-debugify -disable-output &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"-------\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt; results &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here is a sample of the &lt;code&gt;results&lt;/code&gt; file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/home/gramanas/code/llvm/test/Transforms/LICM/2003-02-27-StoreSinkPHIs.ll:
-------
CheckDebugify: PASS
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2003-05-02-LoadHoist.ll:
-------
ERROR: Instruction with empty DebugLoc --   %B.lcssa &lt;span class="o"&gt;=&lt;/span&gt; phi i32 &lt;span class="o"&gt;[&lt;/span&gt; %B, %Loop &lt;span class="o"&gt;]&lt;/span&gt;
CheckDebugify: FAIL
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2004-09-14-AliasAnalysisInvalidate.ll:
-------
WARNING: Missing line &lt;span class="m"&gt;3&lt;/span&gt;
WARNING: Missing line &lt;span class="m"&gt;4&lt;/span&gt;
CheckDebugify: PASS
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2003-02-28-PromoteDifferentType.ll:
-------
ERROR: Instruction with empty DebugLoc --   %P2 &lt;span class="o"&gt;=&lt;/span&gt; bitcast i32* %P to i8*
WARNING: Missing line &lt;span class="m"&gt;3&lt;/span&gt;
CheckDebugify: FAIL
-------
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/finding-debuginfo-loss/</guid><pubDate>Tue, 27 Mar 2018 12:51:52 GMT</pubDate></item><item><title>Debug Information</title><link>https://gramanas.github.io/posts/debug-information/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Developer resources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://llvm.org/docs/SourceLevelDebugging.html"&gt;Source Level Debugging with LLVM&lt;/a&gt; -llvm docs
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/debug-information/</guid><pubDate>Wed, 21 Mar 2018 14:50:57 GMT</pubDate></item><item><title>Compiling LLVM</title><link>https://gramanas.github.io/posts/compiling-llvm/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
After looking through the 2018 GSoC projects LLVM
stands out as the most interesting one for me.
&lt;/p&gt;

&lt;p&gt;
Before it's even time to contact anyone from the
project, I should at least build it first and verify that it passes
any tests they might have.
&lt;/p&gt;

&lt;p&gt;
As I don't have much experience with building such complicated
and big projects, this took quite some time.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Build process&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The project uses CMake as a build system, with many flags available to tune
the installation. After checking out the source code either from git or SVN
it's time to build it.
&lt;/p&gt;

&lt;p&gt;
After some failed attempts and some Q&amp;amp;A's in the IRC channel, I found the required flags
to build it in my system. Turns out I can have multiple build folders for 
differently configured builds, so my plan is to have one minimal build for developing purposes
and one full build to run the final tests before sending a patch.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Time concerns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
My computer is old.
&lt;/p&gt;

&lt;p&gt;
OK, it's not that old, but it is abused the last 6 years that I own it
and it's not top tier. Just a normal &lt;code&gt;i5&lt;/code&gt; computer from the 2010s.
&lt;/p&gt;

&lt;p&gt;
That said, the first time I built LLVM, it took more than 45 minutes.
&lt;/p&gt;

&lt;p&gt;
There are various optimizations one could do to improve compilation times.
I already mentioned keeping two differently configured build folders.
I also installed &lt;code&gt;ccahce&lt;/code&gt; since LLVM's &lt;code&gt;CMakeLists.txt&lt;/code&gt; has a flag to
enable it's usage. C++ modules also help.
&lt;/p&gt;

&lt;p&gt;
Ninja is recommended in the wiki, and it's probably the fastest one, so I use that as well.
&lt;/p&gt;

&lt;p&gt;
Building with a minimal build and just the component I'm working on,
greatly reduces build times.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Configuration&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Here are the minimal build flags:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /build/llvm-dev &lt;span class="c1"&gt;# the minimal folder&lt;/span&gt;
cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DBUILD_SHARED_LIBS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;RelWithDebInfo &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_ENABLE_ASSERTIONS&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_CXX_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang++ &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_C_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_CCACHE_BUILD&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCLANG_ENABLE_ARCMT&lt;span class="o"&gt;=&lt;/span&gt;OFF &lt;span class="se"&gt;\&lt;/span&gt;
      -DCLANG_ENABLE_STATIC_ANALYZER&lt;span class="o"&gt;=&lt;/span&gt;OFF &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_TARGETS_TO_BUILD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"X86;ARM;AArch64"&lt;/span&gt; ~/code/llvm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here is the full build, basically the same but without the ARCMT and static analyzer disabled, plus it builds for all targets.
Also instead of &lt;code&gt;ccache&lt;/code&gt; I enable the &lt;code&gt;C++&lt;/code&gt; modules.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /build/llvm-full &lt;span class="c1"&gt;# the full build&lt;/span&gt;
cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DBUILD_SHARED_LIBS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Debug &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_ENABLE_ASSERTIONS&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_CXX_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang++ &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_C_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_ENABLE_MODULES&lt;span class="o"&gt;=&lt;/span&gt;ON ~/code/llvm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/compiling-llvm/</guid><pubDate>Wed, 21 Mar 2018 13:30:55 GMT</pubDate></item></channel></rss>