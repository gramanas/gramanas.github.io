<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gramanas &gt;&gt; blog</title><link>https://gramanas.github.io/</link><description>LLVM development log for GSoC 2018</description><atom:link href="https://gramanas.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:anastasis.gramm2@gmail.com"&gt;Anastasis Grammenos&lt;/a&gt; </copyright><lastBuildDate>Wed, 30 May 2018 12:09:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SROA on amalgamated sqlite source</title><link>https://gramanas.github.io/posts/sroa-on-amalgamated-sqlite-source/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;div id="outline-container-org329a4f5" class="outline-2"&gt;
&lt;h2 id="org329a4f5"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org329a4f5"&gt;
&lt;p&gt;
&lt;code&gt;SROA&lt;/code&gt; is an early stage pass running at the very beginning of the pipeline in &lt;code&gt;-O{1,2,3}&lt;/code&gt;.
Greg Bedwell's report from his DExTer tool shows SROA on function as one of the major
culprits of Debug Info loss.
&lt;/p&gt;

&lt;p&gt;
With debugify-each partially done I tried testing this on the amalgamated sqlite source.
&lt;/p&gt;

&lt;p&gt;
The steps are as follows:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# generate IR file without debug info and optnone&lt;/span&gt;
clang -O0 -Xclang -disable-O0-optnone -S -emit-llvm sqlite3.c -o sqlite

&lt;span class="c1"&gt;# run opt&lt;/span&gt;
opt -sroa -debugify-each sqlite -disable-output &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; results
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb003879" class="outline-2"&gt;
&lt;h2 id="orgb003879"&gt;Results&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb003879"&gt;
&lt;p&gt;
&lt;a href="file:///sroa-results.html"&gt;here&lt;/a&gt; is the full results file.
&lt;/p&gt;

&lt;p&gt;
The results were gather by &lt;code&gt;grep -c&lt;/code&gt;'ing the results file
according to the error's message.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;SROA runs&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;FAIL&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;PASS&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;empty DebugLoc&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Missing line warnings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1978&lt;/td&gt;
&lt;td class="org-right"&gt;1100&lt;/td&gt;
&lt;td class="org-right"&gt;878&lt;/td&gt;
&lt;td class="org-right"&gt;5214&lt;/td&gt;
&lt;td class="org-right"&gt;75166&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
What's worth noticing is that the only error that SROA produces is that of empty
debug locations. No missing variables and dbg.value intrinsics.
Thus all of the 1100 SROA runs that failed are due to empty debug locations.
&lt;/p&gt;

&lt;p&gt;
Also, while skimming through the results file I noticed that the instructions with
missing DL were &lt;code&gt;phi&lt;/code&gt; instructions. To confirm this I did 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep &lt;span class="s2"&gt;"ERROR: Instruction"&lt;/span&gt; results &lt;span class="p"&gt;|&lt;/span&gt; grep phi -c
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
witch gives us a result of &lt;code&gt;5214&lt;/code&gt; and this means that all
the instructions with missing Debug Loc are &lt;code&gt;phi&lt;/code&gt; instructions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4697549" class="outline-2"&gt;
&lt;h2 id="org4697549"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4697549"&gt;
&lt;p&gt;
This implies sroa does a pretty good job of preserving debug values.
Although it contradicts the DExTer results, this might be for a number of
reasons. E.g. it could score so low due to the DebugLoc loss.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/sroa-on-amalgamated-sqlite-source/</guid><pubDate>Wed, 30 May 2018 11:49:10 GMT</pubDate></item><item><title>Week 2</title><link>https://gramanas.github.io/posts/week-2/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
This past days I focused on some missing Debug Loc that occurred at &lt;code&gt;store&lt;/code&gt; instructions
at the function prologue.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Preserving the scope&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Instructions on the function prologue are auto-generated and do not correspond the "real" code.
Thus the Debug Location can't have a valid line number.
&lt;/p&gt;

&lt;p&gt;
But the Debug Location metadata contains scope information as well, witch is useful.
Especially after the passes mix and mash the code to form the optimized module.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
While investigating the SROA pass for missing DI occurrences, there was a test with a &lt;code&gt;phi&lt;/code&gt;
induction that was missing Debug Loc. The problem was then narrowed down to a mem2reg call
from SROA. As it turned out the mem2reg was correctly sourcing the &lt;code&gt;phi&lt;/code&gt; debug location
from the combined stores, so the problem had to be that there was to DI present at all.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Proposed Solution&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Hence this &lt;a href="https://reviews.llvm.org/D47097"&gt;patch&lt;/a&gt; was posted in phab.
&lt;/p&gt;

&lt;p&gt;
There is some talk about whether this change is wanted or not, since the 
DI in the instructions of the function prologue is intended to be missing.
&lt;/p&gt;

&lt;p&gt;
Although &lt;code&gt;test1&lt;/code&gt; clearly shows a phi with missing debug Loc that after the patch is
applied no longer has this problem. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/week-2/</guid><pubDate>Mon, 28 May 2018 15:11:00 GMT</pubDate></item><item><title>Week 1: debugify-each</title><link>https://gramanas.github.io/posts/week-1-debugify-each/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
A first iteration of &lt;a href="https://reviews.llvm.org/D46525"&gt;Debugify-each&lt;/a&gt; has landed earlier this week. The tool works as expected
but it's a bit rough around the edges.
&lt;/p&gt;

&lt;p&gt;
For starters debugify only prints if a pass passed or failed, and not the pass name.
That was not a problem before debugify-each because you knew in what pass you would
run debugify. Now running debugify-each will fill the output with PASS or FAIL
without any information about the name of the pass.
I authored a &lt;a href="https://reviews.llvm.org/D46908"&gt;patch&lt;/a&gt; to fix that.
&lt;/p&gt;

&lt;p&gt;
Another problem is that when running debugify-each in one of the standard pipelines (&lt;code&gt;-O{1-3}&lt;/code&gt;) it will
fill the terminal with it's output – both errors and whether the pass failed or passed
the check-debugify.
&lt;/p&gt;

&lt;p&gt;
This is not the correct way a tool like debugify should work. A user should be able to 
pipe opt's output to other tools while also using debugify-each. To remedy this
another &lt;a href="https://reviews.llvm.org/D46941"&gt;patch&lt;/a&gt; redirects the warnings and errors to &lt;code&gt;stderr&lt;/code&gt; and as a follow-up
debugify should dump it's results to a file.
&lt;/p&gt;</description><guid>https://gramanas.github.io/posts/week-1-debugify-each/</guid><pubDate>Wed, 16 May 2018 14:02:07 GMT</pubDate></item><item><title>Less than a week to go</title><link>https://gramanas.github.io/posts/less-that-a-week-to-go/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
Less than a week remains until the coding period officially starts.
Since the last post a few things changed. For starters I didn't
get to implement the debugify-each mode cause someone else 
already had a semi working implementation for it, witch
recently landed for &lt;a href="https://reviews.llvm.org/D46525"&gt;reviews&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Meanwhile using data from a &lt;a href="https://llvm.org/devmtg/2018-04/talks.html#Lightning_11"&gt;talk&lt;/a&gt; given earlier this year 
we figured that SROA reports a lot of DI Loss occurrences and debugify confirms that.
It's also pretty early in the pipeline, so it's even more important.
So, I've been reading through the code and learning about it. A great help
has been &lt;a href="https://gcc.gnu.org/wiki/summit2010?action=AttachFile&amp;amp;do=get&amp;amp;target=jambor.pdf"&gt;this&lt;/a&gt; paper which tries to explain the goals of the
scalar replacement of aggregates.
&lt;/p&gt;

&lt;p&gt;
SORA is a big and complicated pass. I found this &lt;a href="https://lists.llvm.org/pipermail/llvm-dev/2012-August/052682.html"&gt;mail&lt;/a&gt; from way back
then from Chandler Carruth (who rewrote the pass to it's current form),
that explains the basic underlying logic of the partitioning and splitting
that takes place in the algorithm.
&lt;/p&gt;

&lt;p&gt;
There is still a lot left for me to begin to understand how the pass works,
and as a way of doing that I am currently hunting down when the following DI loss occurs:
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Before SROA:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;entry:
  %a.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4, !tbaa !9
  store i32 %n, i32* %n.addr, align 4, !tbaa !9
  %0 = bitcast i32* %i to i8*, !dbg !13
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !13
  store i32 0, i32* %i, align 4, !dbg !14, !tbaa !9
  br label %for.cond, !dbg !13

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !15, !tbaa !9
  %2 = load i32, i32* %n.addr, align 4, !dbg !17, !tbaa !9
  %cmp = icmp slt i32 %1, %2, !dbg !18
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !19
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;After SROA:&lt;/code&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;entry:
  br label %for.cond, !dbg !9

for.cond:                                         ; preds = %for.inc, %entry
  %a.addr.0 = phi i32 [ %a, %entry ], [ %0, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !10
  %cmp = icmp slt i32 %i.0, %n, !dbg !12
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !14
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Notice the missing DI in the first φ instruction of the &lt;code&gt;for.cond&lt;/code&gt; block.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Closing thoughts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I am still very disoriented in the codebase and I am trying to understand 
how things interact with each other. I believe I have made some progress 
but there are still so many things to read and learn and I haven't even 
started to code yet! 
&lt;/p&gt;

&lt;p&gt;
The community is extremely active, the code is well
documented, the dev tools are amazing and every singe day I spend
reading code and documentation I learn countless new exciting things. 
As much as I am scared of the vastness of the project I am also excited
to have this chance to work with all these great developers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/less-that-a-week-to-go/</guid><pubDate>Wed, 09 May 2018 23:42:17 GMT</pubDate></item><item><title>Community Bonding</title><link>https://gramanas.github.io/posts/community-bonding/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
My proposal was accepted!
&lt;/p&gt;

&lt;p&gt;
For the next few days it's the community bonding period. I will take advantage
of this time to let the community know about my project and it's goals, as well
as get a head start on the coding period.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Starting the project&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The first step to improving the debugging of optimized code is to measure
where we lose Debug information.
Verdant has already created the tool to do that. It's the &lt;a href="https://reviews.llvm.org/D40512"&gt;debugify mode&lt;/a&gt;.
Currently &lt;code&gt;debugify&lt;/code&gt; is a &lt;code&gt;ModulePass&lt;/code&gt; and works like &lt;a href="https://gramanas.github.io/posts/finding-debuginfo-loss/"&gt;that&lt;/a&gt;. 
It needs to be refactored into a &lt;code&gt;FunctionPass&lt;/code&gt; while keeping the
same underlying logic. That way it will be managed from the &lt;code&gt;FunctionPassManager&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Next the opt tool should have a custom &lt;code&gt;PassManager&lt;/code&gt; that injects the new
debugify before a pass and then the new check-debugify after it. This will
be a new mode called debugify-each. It will basically gather DI loss from
every pass in the pipeline.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Debugify&lt;/code&gt; as &lt;code&gt;ModulePass&lt;/code&gt; will still be available but it will be a wrapper
around the &lt;code&gt;FunctionPass&lt;/code&gt; one.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;OK, I got the data. Now what?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The resulting DI loss occurrences will be stored into some kind of human readable
data serialization format, like JSON or YAML.
&lt;/p&gt;

&lt;p&gt;
More on that on a later post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/community-bonding/</guid><pubDate>Wed, 25 Apr 2018 15:09:41 GMT</pubDate></item><item><title>Finding DebugInfo Loss</title><link>https://gramanas.github.io/posts/finding-debuginfo-loss/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
In order to fix &lt;code&gt;DebugInfo&lt;/code&gt; loss I need to find where and when it occurs.
Many transformations result in &lt;code&gt;DI&lt;/code&gt; loss due to the simple fact that they change
and optimize code and thus the resulting llvm IR doesn't match the
original code.
&lt;/p&gt;

&lt;p&gt;
The opt tool has the &lt;code&gt;-debugify&lt;/code&gt; and &lt;code&gt;-check-debugify&lt;/code&gt; flags to attach
&lt;code&gt;DI&lt;/code&gt; to everything and then check if it's correct.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Find culprit transformations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
With a simple bash script I can run tests under a transformation folder
like so:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;ls ~/code/llvm/test/Transforms/&lt;span class="nv"&gt;$TRANSFORMATION&lt;/span&gt;/*.ll -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;":\n-------"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    opt -debugify -&lt;span class="nv"&gt;$TRANSFORMATION&lt;/span&gt; -check-debugify -disable-output &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"-------\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt; results &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and then proceed to view the results.
&lt;/p&gt;

&lt;p&gt;
For example here is the command for the LICM transformation:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;ls ~/code/llvm/test/Transforms/LICM/*.ll -1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;":\n-------"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    opt -debugify -licm -check-debugify -disable-output &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"-------\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;done&lt;/span&gt; &amp;gt; results &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here is a sample of the &lt;code&gt;results&lt;/code&gt; file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/home/gramanas/code/llvm/test/Transforms/LICM/2003-02-27-StoreSinkPHIs.ll:
-------
CheckDebugify: PASS
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2003-05-02-LoadHoist.ll:
-------
ERROR: Instruction with empty DebugLoc --   %B.lcssa &lt;span class="o"&gt;=&lt;/span&gt; phi i32 &lt;span class="o"&gt;[&lt;/span&gt; %B, %Loop &lt;span class="o"&gt;]&lt;/span&gt;
CheckDebugify: FAIL
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2004-09-14-AliasAnalysisInvalidate.ll:
-------
WARNING: Missing line &lt;span class="m"&gt;3&lt;/span&gt;
WARNING: Missing line &lt;span class="m"&gt;4&lt;/span&gt;
CheckDebugify: PASS
-------

/home/gramanas/code/llvm/test/Transforms/LICM/2003-02-28-PromoteDifferentType.ll:
-------
ERROR: Instruction with empty DebugLoc --   %P2 &lt;span class="o"&gt;=&lt;/span&gt; bitcast i32* %P to i8*
WARNING: Missing line &lt;span class="m"&gt;3&lt;/span&gt;
CheckDebugify: FAIL
-------
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/finding-debuginfo-loss/</guid><pubDate>Tue, 27 Mar 2018 12:51:52 GMT</pubDate></item><item><title>Debug Information</title><link>https://gramanas.github.io/posts/debug-information/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Developer resources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://llvm.org/docs/SourceLevelDebugging.html"&gt;Source Level Debugging with LLVM&lt;/a&gt; -llvm docs
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/debug-information/</guid><pubDate>Wed, 21 Mar 2018 14:50:57 GMT</pubDate></item><item><title>Compiling LLVM</title><link>https://gramanas.github.io/posts/compiling-llvm/</link><dc:creator>Anastasis Grammenos</dc:creator><description>&lt;p&gt;
After looking through the 2018 GSoC projects LLVM
stands out as the most interesting one for me.
&lt;/p&gt;

&lt;p&gt;
Before it's even time to contact anyone from the
project, I should at least build it first and verify that it passes
any tests they might have.
&lt;/p&gt;

&lt;p&gt;
As I don't have much experience with building such complicated
and big projects, this took quite some time.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Build process&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The project uses CMake as a build system, with many flags available to tune
the compilation. After checking out the source code either from git or SVN
it's time to build it.
&lt;/p&gt;

&lt;p&gt;
After some failed attempts and some Q&amp;amp;A's in the IRC channel, I found the required flags
to build it in my system. Turns out I can have multiple build folders for 
differently configured builds, so my plan is to have one minimal build for developing purposes
and one full build to run the final tests before sending a patch.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Time concerns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
My computer is old.
&lt;/p&gt;

&lt;p&gt;
OK, it's not that old, but it is abused the last 6 years that I own it
and it's not top tier. Just a normal &lt;code&gt;i5&lt;/code&gt; computer from the 2010s.
&lt;/p&gt;

&lt;p&gt;
That said, the first time I built LLVM, it took more than 45 minutes.
&lt;/p&gt;

&lt;p&gt;
There are various optimizations one could do to improve compilation times.
I already mentioned keeping two differently configured build folders.
I also installed &lt;code&gt;ccahce&lt;/code&gt; since LLVM's &lt;code&gt;CMakeLists.txt&lt;/code&gt; has a flag to
enable it's usage. C++ modules also help.
&lt;/p&gt;

&lt;p&gt;
Ninja is recommended in the wiki, and it's probably the fastest one, so I use that as well.
&lt;/p&gt;

&lt;p&gt;
Building with a minimal build and just the component I'm working on,
greatly reduces build times.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Configuration&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Here are the minimal build flags:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /build/llvm-dev &lt;span class="c1"&gt;# the minimal folder&lt;/span&gt;
cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DBUILD_SHARED_LIBS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Debug &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_ENABLE_ASSERTIONS&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_CXX_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang++ &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_C_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_CCACHE_BUILD&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCLANG_ENABLE_ARCMT&lt;span class="o"&gt;=&lt;/span&gt;OFF &lt;span class="se"&gt;\&lt;/span&gt;
      -DCLANG_ENABLE_STATIC_ANALYZER&lt;span class="o"&gt;=&lt;/span&gt;OFF &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_TARGETS_TO_BUILD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"X86;ARM;AArch64"&lt;/span&gt; ~/code/llvm
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And here is the full build, basically the same but without the ARCMT and static analyzer disabled, plus it builds for all targets.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /build/llvm-full &lt;span class="c1"&gt;# the full build&lt;/span&gt;
cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DBUILD_SHARED_LIBS&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_BUILD_TYPE&lt;span class="o"&gt;=&lt;/span&gt;Debug &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_ENABLE_ASSERTIONS&lt;span class="o"&gt;=&lt;/span&gt;ON &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_CXX_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang++ &lt;span class="se"&gt;\&lt;/span&gt;
      -DCMAKE_C_COMPILER&lt;span class="o"&gt;=&lt;/span&gt;clang &lt;span class="se"&gt;\&lt;/span&gt;
      -DLLVM_CCACHE_BUILD&lt;span class="o"&gt;=&lt;/span&gt;ON ~/code/llvm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://gramanas.github.io/posts/compiling-llvm/</guid><pubDate>Wed, 21 Mar 2018 13:30:55 GMT</pubDate></item></channel></rss>